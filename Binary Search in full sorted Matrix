import java.util.Arrays;

public class Main {
    public static void main(String[] args) throws Exception {

        int[][] mat = {
                {1,2,3},
                {4,5,6},
                {7,8,9},
        };
        int target = 1;
        int[] ans = binarySearchMatrix(mat, target);
        System.out.println(Arrays.toString(ans));
    }

    private static int[] binarySearchMatrix(int[][] mat, int target) {
        int rowE = mat.length - 1;
        int colE = mat[rowE].length - 1;

        if(rowE == 0){
            return binarySearch1(mat, 0, 0, colE, target);
        }
        int colM = colE / 2;
        int rowS = 0;

        while(rowS < rowE - 1){
            int rMid = rowS + (rowE - rowS) / 2;
            if(target == mat[rMid][colM]){
                return new int[]{rMid, colM};
            }
            if(target < mat[rMid][colM]){
                rowE = rMid;
            }
            else{
                rowS = rMid;
            }
        }
        if(target == mat[rowS][colM]){
            return new int[]{rowS, colM};
        }
        if(target == mat[rowE][colM]){
            return new int[]{rowE, colM};
        }
        if(target < mat[rowS][colM]){
            return binarySearch1(mat, rowS, 0, colM-1, target);
        }
        if(target > mat[rowS][colM] && target <= mat[rowS][colE]){
            return binarySearch1(mat, rowS, colM+1, colE, target);
        }
        if(target < mat[rowE][colM]){
            return binarySearch1(mat, rowE, 0, colM-1, target);
        }
        return binarySearch1(mat, rowE, colM+1, colE, target);
    }

    private static int[] binarySearch1(int[][] mat, int row, int start, int end, int target) {
        while(start <= end){
            int mid = start + (end - start) / 2;
            if(target == mat[row][mid]){
                return new int[]{row, mid};
            }
            if(target < mat[row][mid]){
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
        }
        return new int[]{-1, -1};
    }
}
