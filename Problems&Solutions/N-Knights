public class Main {
    public static void main(String[] args) throws Exception {
        int n = 4;
        boolean[][] board = new boolean[n][n];
        nKights(board, 0, 0, 4);
    }

    private static void nKights(boolean[][] board, int row, int col, int knights) {
        if(knights == 0){
            printBoard(board);
            System.out.println();
            return;
        }

        if(row == board.length - 1 && col == board.length){
            return;
        }
        if(col == board.length){
            nKights(board, row + 1, 0, knights);
            return;
        }

        if(isSafe(board, row, col)){
            board[row][col] = true;
            nKights(board, row, col + 1, knights - 1);
            board[row][col] = false;
        }
        nKights(board, row, col + 1, knights);
    }

    private static boolean isSafe(boolean[][] board, int row, int col) {
        if(isValidO(board, row - 2, col - 1)){
            if(board[row][col]){
                return false;
            }
        }
        if(isValidO(board, row - 2 , col + 1)){
            if(board[row][col]){
                return false;
            }
        }
        if(isValidO(board, row - 1 , col - 2)){
            if(board[row][col]){
                return false;
            }
        }
        if(isValidO(board, row - 1, col + 2)){
            if(board[row][col]){
                return false;
            }
        }
        return true;
    }

    private static boolean isValidO(boolean[][] board, int row, int col) {
        return row >= 0 && col >= 0 && row < board.length && col < board.length;
    }

    private static void printBoard(boolean[][] board) {
        for(boolean[] row : board){
            for(int i = 0; i < row.length; i++){
                if(row[i]){
                    System.out.print('K');
                }
                else {
                    System.out.print('X');
                }
            }
            System.out.println();
        }
    }
}
