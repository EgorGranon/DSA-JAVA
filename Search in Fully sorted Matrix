import java.util.Arrays;

public class Main {
    public static void main(String[] args) throws Exception {
        int[][] matrix = {
                {1,2,3},
                {4,5,6},
                {7,8,9},
        };
        int target = 9;
        int[] index = matrixBinarySearch(matrix, target);
        System.out.println(Arrays.toString(index));
    }

    private static int[] matrixBinarySearch(int[][] matrix, int target) {
        int rowEnd = matrix.length - 1;
        int colEnd = matrix[rowEnd].length - 1;

        if(rowEnd == 0){
            return binarySearch1(matrix, rowEnd, 0, colEnd, target);
        }
        int rowStart = 0;
        int colMid = colEnd / 2;

        while(rowStart < rowEnd - 1){
            int rowMid = rowStart + (rowEnd - rowStart) / 2;
            if(target == matrix[rowMid][colMid]){
                return new int[]{rowMid, colMid};
            }
            if(target < matrix[rowMid][colMid]){
                rowEnd = rowMid;
            }
            else{
                rowStart = rowMid;
            }
        }
        if(target == matrix[rowStart][colMid]){
            return new int[]{rowStart, colMid};
        }
        if(target == matrix[rowEnd][colMid]){
            return new int[]{rowEnd, colMid};
        }
        if(target < matrix[rowStart][colMid]){
            return binarySearch1(matrix, rowStart, 0, colMid - 1, target);
        }
        if(target > matrix[rowStart][colMid] && target <= matrix[rowStart][colEnd]){
            return binarySearch1(matrix, rowStart, colMid + 1, colEnd, target);
        }
        if(target < matrix[rowEnd][colMid]){
            return binarySearch1(matrix, rowEnd, 0, colMid - 1, target);
        }
        return binarySearch1(matrix, rowEnd, colMid + 1, colEnd, target);
    }
    private static int[] binarySearch1(int[][] matrix, int row, int start, int end, int target) {
        while(start <= end){
            int mid = start + (end - start) / 2;
            if (target == matrix[row][mid]) {
                return new int[]{row, mid};
            }
            if (target < matrix[row][mid]){
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
        }
        return new int[]{-1,-1};
    }
}
